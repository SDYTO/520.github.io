<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>分享快乐</title><link>https://SDYTO.github.io/520.github.io</link><description>分享快乐</description><copyright>分享快乐</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://app.yto88.cn/img/png/Settings1.png</url><title>avatar</title><link>https://SDYTO.github.io/520.github.io</link></image><lastBuildDate>Mon, 16 Dec 2024 06:45:27 +0000</lastBuildDate><managingEditor>分享快乐</managingEditor><ttl>60</ttl><webMaster>分享快乐</webMaster><item><title>Opwrt配置软件源</title><link>https://SDYTO.github.io/520.github.io/post/Opwrt-pei-zhi-ruan-jian-yuan.html</link><description>⚠️ 注意事项1&#13;
有些小伙伴反馈，代码执行成功，iStore也更新成功，但是依旧无法安装。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/Opwrt-pei-zhi-ruan-jian-yuan.html</guid><pubDate>Mon, 16 Dec 2024 06:44:58 +0000</pubDate></item><item><title>文章写作教程</title><link>https://SDYTO.github.io/520.github.io/post/wen-zhang-xie-zuo-jiao-cheng.html</link><description>![image](https://github.com/user-attachments/assets/6347c21a-b7a7-48e0-87f9-669c8c37bcc6)&#13;
![image](https://github.com/user-attachments/assets/dd1aed1b-644e-415a-bcb8-4b8d88dadf03)&#13;
。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/wen-zhang-xie-zuo-jiao-cheng.html</guid><pubDate>Mon, 16 Dec 2024 06:38:25 +0000</pubDate></item><item><title>在线编译适用于您设备的 OpenWrt 固件</title><link>https://SDYTO.github.io/520.github.io/post/zai-xian-bian-yi-shi-yong-yu-nin-she-bei-de-%20OpenWrt%20-gu-jian.html</link><description>1.在线编译地址https://firmware-selector.openwrt.org/?version=23.05.5&amp;target=x86%2F64&amp;id=generic&#13;
![image](https://github.com/user-attachments/assets/6ca5a382-aacf-4fe5-be50-4bca55017e62)&#13;
注意上方🔝截图，有一个展开的按钮。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/zai-xian-bian-yi-shi-yong-yu-nin-she-bei-de-%20OpenWrt%20-gu-jian.html</guid><pubDate>Mon, 16 Dec 2024 06:25:41 +0000</pubDate></item><item><title>在线编译适用于您设备的 OpenWrt 固件</title><link>https://SDYTO.github.io/520.github.io/post/zai-xian-bian-yi-shi-yong-yu-nin-she-bei-de-%20OpenWrt%20-gu-jian.html</link><description>https://firmware-selector.openwrt.org/?version=23.05.5&amp;target=x86%2F64&amp;id=generic&#13;
![image](https://github.com/user-attachments/assets/356059a6-37e9-4c48-8546-0510b5def77b)&#13;
。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/zai-xian-bian-yi-shi-yong-yu-nin-she-bei-de-%20OpenWrt%20-gu-jian.html</guid><pubDate>Mon, 16 Dec 2024 03:26:12 +0000</pubDate></item><item><title>防沉迷路由系统</title><link>https://SDYTO.github.io/520.github.io/post/fang-chen-mi-lu-you-xi-tong.html</link><description>支持屏蔽常见的游戏、视频、聊天等APP，如抖音、斗鱼、王者荣耀、和平精英等，并支持 APP使用时长统计、定时断网，小孩网课必备神器 #15 #16&#13;
https://fros.org.cn/&#13;
&#13;
基于OpenWrt开发的上网行为管理系统，支持防沉迷、应用过滤、网址过滤、APP记录、网址记录等功能，&#13;
目前已经支持运行在各种主流路由器中，比如红米AC2100、360T7、小米R3G、极路由4、斐讯k2p、x86虚拟机等，&#13;
可以设置每天小孩允许玩游戏、看视频时间，还支持统计手机的APP和网址访问记录，结合记录功能可以自定义屏蔽&#13;
指定网址，防止小孩浏览垃圾网站，健康上网。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/fang-chen-mi-lu-you-xi-tong.html</guid><pubDate>Mon, 16 Dec 2024 02:51:44 +0000</pubDate></item><item><title>github.com加速软件</title><link>https://SDYTO.github.io/520.github.io/post/github.com-jia-su-ruan-jian.html</link><description>https://steampp.net/&#13;
Watt Toolkit&#13;
v3.0.0-rc.13&#13;
「Watt Toolkit」是一个开源跨&#13;
平台的多功能 Steam 工具箱。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/github.com-jia-su-ruan-jian.html</guid><pubDate>Mon, 16 Dec 2024 02:39:54 +0000</pubDate></item><item><title>要在华为交换机上配置堆叠（Stack），可以按照以下步骤进行</title><link>https://SDYTO.github.io/520.github.io/post/yao-zai-hua-wei-jiao-huan-ji-shang-pei-zhi-dui-die-%EF%BC%88Stack%EF%BC%89%EF%BC%8C-ke-yi-an-zhao-yi-xia-bu-zou-jin-xing.html</link><description>清除堆叠配置&#13;
&#13;
方法一：&#13;
执行命令reset stack configuration清除堆叠相关配置。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/yao-zai-hua-wei-jiao-huan-ji-shang-pei-zhi-dui-die-%EF%BC%88Stack%EF%BC%89%EF%BC%8C-ke-yi-an-zhao-yi-xia-bu-zou-jin-xing.html</guid><pubDate>Sat, 14 Dec 2024 09:50:03 +0000</pubDate></item><item><title>Ping 命令常用的几种方法</title><link>https://SDYTO.github.io/520.github.io/post/Ping%20-ming-ling-chang-yong-de-ji-zhong-fang-fa.html</link><description>	route Print&#13;
for /L %D in (1,1,255) do ping 192.168.1.%D&#13;
ping 命令是日常用来判断网络情况常用的命令，今天我们就来学习一下ping命令的一些用法。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/Ping%20-ming-ling-chang-yong-de-ji-zhong-fang-fa.html</guid><pubDate>Sat, 14 Dec 2024 09:48:05 +0000</pubDate></item><item><title>Docker安装Home Assistant (Hassio Supervisor)</title><link>https://SDYTO.github.io/520.github.io/post/Docker-an-zhuang-Home%20Assistant%20%28Hassio%20Supervisor%29.html</link><description>目前尝试过安装在arm64和x64的Ubuntu上，Openwrt上，Pve母机的Debian上，openwrt直接跑会出现内存溢出的情况，本文最后说说如何从根本上解决，顺便鄙视一下某个每篇文章都要1.99元的网站&#13;
虽然官方有安装脚本，但等于没有一样，并用不了，不要尝试&#13;
docker run -d --name hassio_supervisor --privileged --restart always -v /run/docker.sock:/run/docker.sock -v /run/dbus:/run/dbus -v /run/udev:/run/udev -v /root/docker/hassio:/data -e SUPERVISOR_SHARE=/root/docker/hassio -e SUPERVISOR_NAME=hassio_supervisor -e HOMEASSISTANT_REPOSITORY=homeassistant/qemux86-64-homeassistant [ghcr.io/home-assistant/amd64-hassio-supervisor:2023.10.0]( http://ghcr.io/home-assistant/amd64-hassio-supervisor:2023.10.0)&#13;
下载&#13;
删掉冒号后面的去访问就能知道最新stable版本是多少不下载也行，启动的时候会下载&#13;
arm64&#13;
docker pull ghcr.io/home-assistant/aarch64-hassio-supervisor:2023.08.1&#13;
docker pull ghcr.io/home-assistant/aarch64-homeassistant:2023.8.1&#13;
x64&#13;
docker pull ghcr.io/home-assistant/amd64-hassio-supervisor:2023.08.1&#13;
docker pull ghcr.io/home-assistant/qemux86-64-homeassistant:2023.8.1&#13;
启动&#13;
不要看官方文档安装他所需要的依赖，因为那些依赖确实没有也行，并且如果在Pve下安装networkmanager会导致网络崩坏&#13;
此处 /opt/apps/hassio 是Home Assistant的所有数据，可以改到你想要的地方，迁移的时候也只需要迁移这个文件夹，并卸载重新安装所有插件（插件即容器，数据不会丢）不要问为什么不加--privileged问就是启不来&#13;
arm64&#13;
docker run -d --name hassio_supervisor --privileged \&#13;
--restart unless-stopped \&#13;
-v /var/run/docker.sock:/var/run/docker.sock \&#13;
-v /var/run/dbus:/var/run/dbus \&#13;
-v /opt/apps/hassio:/data \&#13;
-e SUPERVISOR_SHARE=/opt/apps/hassio \&#13;
-e SUPERVISOR_NAME=hassio_supervisor \&#13;
-e HOMEASSISTANT_REPOSITORY=homeassistant/aarch64-homeassistant \&#13;
ghcr.io/home-assistant/aarch64-hassio-supervisor:2023.08.1&#13;
x64&#13;
docker run -d --name hassio_supervisor --privileged \&#13;
--restart always \&#13;
-v /var/run/docker.sock:/var/run/docker.sock \&#13;
-v /var/run/dbus:/var/run/dbus \&#13;
-v /opt/apps/hassio:/data \&#13;
-e SUPERVISOR_SHARE=/opt/apps/hassio \&#13;
-e SUPERVISOR_NAME=hassio_supervisor \&#13;
-e HOMEASSISTANT_REPOSITORY=homeassistant/qemux86-64-homeassistant \&#13;
ghcr.io/home-assistant/amd64-hassio-supervisor:2023.08.1&#13;
然后需要耐心等待，按网速和性能需要蛮长时间的，用这个命令来看安装情况或者直接去portainer看log&#13;
docker logs -f hassio_supervisor&#13;
另外有人说装完之后找不到Supervisor的菜单，新版的菜单在设置里而不是左边菜单栏上，如果实在找不到，访问路径/hassio/dashboard&#13;
更新&#13;
发布了新版本，怎么可能不更新呢&#13;
这里的容器镜像名记住了替换下面的&#13;
docker stop hassio_supervisor&#13;
docker stop homeassistant&#13;
docker rm hassio_supervisor&#13;
docker rm homeassistant&#13;
docker images | grep supervisor&#13;
上面输出的都挨个删掉&#13;
docker rmi ghcr.io/home-assistant/amd64-hassio-supervisor:2022.04.0&#13;
docker images | grep 4-homeassistant&#13;
上面输出的都挨个删掉&#13;
docker rmi ghcr.io/home-assistant/qemux86-64-homeassistant:2022.3.6&#13;
这里下载最新版 删掉冒号后面的去访问就能知道最新版本是多少，替换掉&#13;
docker pull ghcr.io/home-assistant/amd64-hassio-supervisor:2023.08.1&#13;
docker pull ghcr.io/home-assistant/qemux86-64-homeassistant:2022.11.2&#13;
然后用上面安装的方式去运行，最后一行用上面pull的代替，SUPERVISOR_SHARE必须是同一个地方，迁移也只需要迁移他&#13;
万一 homeassistant 没有启动，那就执行下面这两条再执行上面安装，同时检查下下来的两个镜像是不是最新的稳定版本（没有dev字样）&#13;
docker stop hassio_cli hassio_multicast hassio_audio hassio_dns hassio_observer hassio_supervisor homeassistant&#13;
docker rm hassio_cli hassio_multicast hassio_audio hassio_dns hassio_observer hassio_supervisor homeassistant&#13;
错误和解决方案&#13;
	1. 'AddonManager.install' blocked from execution, system is not healthy&#13;
hassio文件夹下新建jobs.json并在里面写入&#13;
{'ignore_conditions': ['healthy']}&#13;
	2. 在Openwrt下，hassio_audio会以肉眼可见的速度拼命吃内存，原因是因为Openwrt没有/dev/fd&#13;
解决方案1（推荐）&#13;
ln -s /proc/self/fd /dev/fd&#13;
并且写到启动项中（因为是tmpfs所以需要每次开机都建一次软连接）&#13;
解决方案2（虽然说这东西没啥用，但hassio_supervisor有守护进程，会自动重启它，起起停停浪费资源）&#13;
在计划任务写入&#13;
						◊ docker kill hassio_audio&#13;
	3. path /opt/apps/hassio/share is mounted on /opt but it is not a shared or slave mount&#13;
新版hass对所在分区挂载有要求，需要增加一条开机启动（尚不清楚怎么写fstab）&#13;
mount --make-shared /opt&#13;
附加组件&#13;
既然都用到hassio了，那肯定会用到mqtt吧，那就启动一个emqx吧&#13;
docker run -d --name emqx -v /etc/localtime:/etc/localtime -p 1883:1883 -p 18083:18083 emqx/emqx&#13;
然后发现启动报错，因为Openwrt没有/etc/localtime和/etc/timezone&#13;
opkg install zoneinfo-asia&#13;
/etc/init.d/system reload&#13;
docker run -d --name hassio_supervisor --privileged &#13;
-v /var/run/docker.sock:/var/run/docker.sock &#13;
-v /var/run/dbus:/var/run/dbus &#13;
-v /opt/hassio:/data &#13;
-e SUPERVISOR_SHARE='/opt/hassio' &#13;
-e SUPERVISOR_NAME=hassio_supervisor &#13;
-e HOMEASSISTANT_REPOSITORY='homeassistant/qemux86-64-homeassistant' &#13;
--restart=always homeassistant/amd64-hassio-supervisor&#13;
docker run -d --name hassio_supervisor --privileged --restart always -v /run/docker.sock:/run/docker.sock -v /run/dbus:/run/dbus -v /run/udev:/run/udev -v /root/docker/hassio:/data -e SUPERVISOR_SHARE=/root/docker/hassio -e SUPERVISOR_NAME=hassio_supervisor -e HOMEASSISTANT_REPOSITORY=homeassistant/qemux86-64-homeassistant [ghcr.io/home-assistant/amd64-hassio-supervisor:2023.10.0]( http://ghcr.io/home-assistant/amd64-hassio-supervisor:2023.10.0)&#13;
docker run -d --name hassio_supervisor --privileged -v /var/run/docker.sock:/var/run/docker.sock -v /var/run/dbus:/var/run/dbus -v /opt/docker/hassio:/data -e SUPERVISOR_SHARE='/opt/docker/hassio' -e SUPERVISOR_NAME=hassio_supervisor -e HOMEASSISTANT_REPOSITORY='homeassistant/qemux86-64-homeassistant' --restart unless-stopped homeassistant/amd64-hassio-supervisor&#13;
停止 hassio-supervisor 系统服务 sudo systemctl stop hassio-supervisor &amp;&amp; systemctl disable hassio-supervisor # 停止 homeassistant 的 docker 并且删除 docker stop homeassistant&amp;&amp;docker rm homeassistant # 停止 hassio_supervisor 的 docker 并且删除 docker stop hassio_supervisor docker rm hassio_supervisor # 删除相关目录 rm /etc/hassio.json rm /etc/systemd/system/hassio-* rm -r /usr/share/hassio # 删除相关 docker 镜像 docker ps |grep 'homeassistant/' |awk '{print $1}' | xargs docker rm -f docker images |grep 'homeassistant/' | awk '{print $3}'| xargs docker rmi&#13;
。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/Docker-an-zhuang-Home%20Assistant%20%28Hassio%20Supervisor%29.html</guid><pubDate>Sat, 14 Dec 2024 09:39:58 +0000</pubDate></item><item><title>OSPF和IS-IS详解</title><link>https://SDYTO.github.io/520.github.io/post/OSPF-he-IS-IS-xiang-jie.html</link><description>https://issuu.com/xiuxiuebook/docs/ospf___is-is________________________8adbd1f9194bf3&#13;
&#13;
&#13;
&#13;
&#13;
第1章 链路状态路由协议之由来 1&#13;
1.1 星际网络 1&#13;
1.2 ARPANET 4&#13;
1.3 网络工作组 10&#13;
1.4 互联网的诞生 12&#13;
1.5 ARPANET内的路由选择 16&#13;
1.6 欧洲的发展 23&#13;
1.7 独立且平等 25&#13;
1.8 总结 28&#13;
第2章 链路状态路由协议基本知识 29&#13;
2.1 矢量(vector)协议基础 29&#13;
2.1.1 矢量协议的收敛 31&#13;
2.1.2 矢量协议的共性 33&#13;
2.1.3 路由环路 34&#13;
2.2 链路状态的基本概念 44&#13;
2.2.1 邻接关系 47&#13;
2.2.2 泛洪 50&#13;
2.2.3 路由宣告消息的头部 56&#13;
2.2.4 数据库同步 57&#13;
2.2.5 SPF计算 58&#13;
2.2.6 区域 68&#13;
2.3 复习题 69&#13;
第3章 消息类型 71&#13;
3.1 术语比较 71&#13;
3.2 消息封装方式 73&#13;
3.3 消息结构 76&#13;
3.4 消息类型 78&#13;
3.5 LSA和LSP 80&#13;
3.6 子网无关和子网相关功能 82&#13;
3.6.1 子网相关功能 83&#13;
3.6.2 子网无关功能 84&#13;
3.7 复习题 86&#13;
第4章 寻址、邻居发现和邻接关系 87&#13;
4.1 路由器和区域ID 87&#13;
4.1.1 OSPF Router-ID 87&#13;
4.1.2 故障排除：OSPF RID冲突 89&#13;
4.1.3 OSPF区域ID 92&#13;
4.1.4 IS-IS System-ID和区域ID 94&#13;
4.2 Hello协议 96&#13;
4.2.1 OSPF Hello协议基础知识 97&#13;
4.2.2 IS-IS Hello协议基础知识 99&#13;
4.2.3 IS-IS动态主机名交换 106&#13;
4.2.4 OSPF域名查询 107&#13;
4.3 邻接关系 108&#13;
4.3.1 OSPF邻接关系 108&#13;
4.3.2 IS-IS邻接关系 111&#13;
4.4 指定路由器 118&#13;
4.4.1 OSPF指定路由器 121&#13;
4.4.2 IS-IS指定中间系统 125&#13;
4.5 介质类型 127&#13;
4.5.1 OSPF网络类型 127&#13;
4.5.2 IS-IS网络类型 132&#13;
4.6 接口数据库 134&#13;
4.6.1 OSPF接口数据结构 134&#13;
4.6.2 OSPF接口状态 137&#13;
4.6.3 IS-IS接口数据结构 141&#13;
4.7 复习题 143&#13;
第5章 泛洪 145&#13;
5.1 泛洪组件 145&#13;
5.1.1 OSPF泛洪 146&#13;
5.1.2 IS-IS泛洪 155&#13;
5.2 区域类型和路由器类型 163&#13;
5.2.1 OSPF区域和路由器类型 163&#13;
5.2.2 IS-IS区域和路由器类型 166&#13;
5.3 度量类型 168&#13;
5.3.1 OSPF路由度量值 168&#13;
5.3.2 IS-IS路由度量值 171&#13;
5.4 LSA的基本类型 173&#13;
5.4.1 路由器LSA 173&#13;
5.4.2 网络LSA 176&#13;
5.4.3 网络汇总LSA 177&#13;
5.4.4 ASBR汇总LSA 179&#13;
5.4.5 外部LSA 180&#13;
5.5 TLV结构的基本类型 184&#13;
5.5.1 区域地址TLV 185&#13;
5.5.2 IS邻居TLV 185&#13;
5.5.3 所支持的(网络层)协议TLV 187&#13;
5.5.4 接口(所配置的)IP地址TLV 187&#13;
5.5.5 IP内部可达性信息TLV 188&#13;
5.5.6 IP外部可达性信息TLV 189&#13;
5.5.7 经过扩展的IS可达性(信息)TLV 190&#13;
5.5.8 经过扩展的IP可达性(信息)TLV 191&#13;
5.6 复习题 192&#13;
第6章 链路状态数据库同步 195&#13;
6.1 OSPF数据库同步 196&#13;
6.1.1 数据库同步过程中所使用的OSPF协议数据包 196&#13;
6.1.2 选项字段 200&#13;
6.1.3 OSPF邻居数据结构 202&#13;
6.1.4 OSPF路由器在数据库交换和泛洪期间用到的LSA列表 204&#13;
6.1.5 管理数据库的交换：主(Master)/从(Slave)路由器机制 204&#13;
6.1.6 OSPF邻居状态机 207&#13;
6.1.7 OSPF排障方法1：学会解读路由器生成的日志记录及Debug输出信息 213&#13;
6.1.8 OSPF排障方法2：学会比较(不同路由器的)LS数据库 220&#13;
6.2 IS-IS数据库同步 225&#13;
6.2.1 数据库同步过程中所使用的IS-IS PDU 226&#13;
6.2.2 设置路由消息标记和序列号消息标记 229&#13;
6.2.3 点到点网络环境中的LS数据库同步 230&#13;
6.2.4 广播网络环境中的LS数据库同步 232&#13;
6.2.5 IS-IS排障方法1：学会解读路由器生成的日志记录及Debug输出信息 234&#13;
6.2.6 IS-IS排障方法2：学会比较不同IS-IS路由器的LS数据库 238&#13;
6.3 复习题 239&#13;
第7章 区域设计 241&#13;
7.1 区域的可扩展性 242&#13;
7.2 区域的可靠性 244&#13;
7.3 OSPF区域 246&#13;
7.3.1 骨干区域和非骨干区域 246&#13;
7.3.2 影响OSPF区域“伸缩自如”的因素 250&#13;
7.3.3 外部路由前缀和OSPF路由进程域的规模 253&#13;
7.3.4 stub区域 256&#13;
7.3.5 Totally stub区域 259&#13;
7.3.6 Not-So-Stubby区域 260&#13;
7.3.7 地址汇总 263&#13;
7.3.8 虚链路 265&#13;
7.4 IS-IS区域 271&#13;
7.4.1 骨干区域和非骨干区域 271&#13;
7.4.2 影响IS-IS区域“伸缩自如”的因素 275&#13;
7.4.3 IS-IS L1区域内默认的路由选择规则 279&#13;
7.4.4 L1/L2路由器冗余 284&#13;
7.4.5 再谈地址汇总 285&#13;
7.4.6 L2到L1的路由泄露 286&#13;
7.4.7 将外部IP前缀重分发进IS-IS 291&#13;
7.4.8 在一台路由器上配置多个AID(多区域ID) 293&#13;
7.4.9 IS-IS虚链路 293&#13;
7.4.10 BGP和IGP区域设计 294&#13;
7.5 复习题 295&#13;
第8章 伸缩自如 297&#13;
8.1 对SPF算法的改进 297&#13;
8.1.1 等开销多路径 298&#13;
8.1.2 伪节点和ECMP 305&#13;
8.1.3 增量SPF计算 309&#13;
8.1.4 部分路由计算 311&#13;
8.1.5 SPF延迟 312&#13;
8.2 改进路由器泛洪LSA/LSP的机制 314&#13;
8.2.1 控制路由器发送LSA/LSP的节奏(Transmit Pacing) 315&#13;
8.2.2 控制路由器重传LSA/LSP的节奏(Retransmit Pacing) 318&#13;
8.2.3 Mesh Groups 319&#13;
8.2.4 按需电路和泛洪抑制 323&#13;
8.3 分片 327&#13;
8.4 过载(Overloading) 332&#13;
8.5 复习题 336&#13;
第9章 安全性和可靠性 339&#13;
9.1 路由协议的漏洞 339&#13;
9.1.1 恶意危害 340&#13;
9.1.2 非恶意危害 342&#13;
9.2 安全特性与可靠特性 343&#13;
9.2.1 固有安全特性 343&#13;
9.2.2 认证 344&#13;
9.2.3 校验和 354&#13;
9.2.4 优雅重启动(Graceful Restart) 356&#13;
9.2.5 双向转发检测 369&#13;
9.3 网络的安全性和可靠性设计 373&#13;
9.3.1 冗余性 374&#13;
9.3.2 路由进程域边界防护 377&#13;
9.3.3 路由器防护 378&#13;
9.4 与保障网络安全性和可靠性有关的运维经验 383&#13;
9.4.1 配置管理 384&#13;
9.4.2 变更管理 385&#13;
9.4.3 仿真网络环境(The Network Lab) 390&#13;
9.5 复习题 391&#13;
第10章 可扩展能力 393&#13;
10.1 扩展OSPF 393&#13;
10.1.1 OSPF面临的可扩展性问题 394&#13;
10.1.2 不透明LSA(Opaque LSA) 395&#13;
10.1.3 不透明LSA(Opaque LSA) 398&#13;
10.2 扩展IS-IS 400&#13;
10.2.1 IS-IS在可扩展性方面的优势 400&#13;
10.2.2 (本机)所支持的协议TLV 401&#13;
10.3 路由标记 401&#13;
10.4 复习题 403&#13;
第11章 为支持MPLS流量工程所添加的扩展功能 405&#13;
11.1 MPLS：概述 406&#13;
11.1.1 标签和标签交换 406&#13;
11.1.2 转发等价类和标签绑定 409&#13;
11.1.3 标签(绑定信息的)分发 410&#13;
11.1.4 MPLS头部 411&#13;
11.2 流量工程：概述 413&#13;
11.2.1 TE链路参数 414&#13;
11.2.2 受约束的最短路径优先算法 416&#13;
11.3 为支持流量工程针对OSPF做出的改进 419&#13;
11.4 为支持流量工程而针对IS-IS做出的改进 422&#13;
11.5 复习题 423&#13;
第12章 为支持IPv6所添加的扩展功能 425&#13;
12.1 IPv6：概述 425&#13;
12.1.1 IPv6的特征和功能 427&#13;
12.1.2 IPv6地址的格式 428&#13;
12.1.3 IPv6地址的表示方法 430&#13;
12.1.4 邻居发现协议 431&#13;
12.1.5 无状态地址自动配置 433&#13;
12.1.6 IPv6包头格式 435&#13;
12.1.7 扩展包头 437&#13;
12.2 OSPFv3 439&#13;
12.2.1 OSPF执行IPv4和IPv6路由选择的兼容性 440&#13;
12.2.2 OSPFv2和OSPFv3之间的区别 441&#13;
12.2.3 OSPFv3 LSA 442&#13;
12.2.4 选项字段 453&#13;
12.2.5 OSPFv3协议数据包 454&#13;
12.2.6 未来对OSPFv3的改进 456&#13;
12.3 为支持IPv6路由选择针对IS-IS做出的改进 457&#13;
12.4 复习题 459&#13;
第13章 为支持多拓扑路由选择所做出的改进 461&#13;
13.1 为支持多拓扑路由选择对OSPF所做的改进 462&#13;
13.1.1 MT-OSPF运作规程 463&#13;
13.1.2 MT-OSPF LSA 464&#13;
13.1.3 链路排除 466&#13;
13.2 为支持多拓扑路由选择对IS-IS所做的改进 467&#13;
13.2.1 链路排除 467&#13;
13.2.2 MT-ISIS TLV 469&#13;
13.3 复习题 471&#13;
后记 链路状态路由协议之未来 473&#13;
&#13;
来自 &lt;https://book.douban.com/subject/26709271/&gt; &#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/OSPF-he-IS-IS-xiang-jie.html</guid><pubDate>Sat, 14 Dec 2024 09:36:58 +0000</pubDate></item><item><title>数据库问题解决办法</title><link>https://SDYTO.github.io/520.github.io/post/shu-ju-ku-wen-ti-jie-jue-ban-fa.html</link><description>1.数据库无法启动：&#13;
 &#13;
检查数据库服务是否已启动。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/shu-ju-ku-wen-ti-jie-jue-ban-fa.html</guid><pubDate>Sat, 14 Dec 2024 09:32:41 +0000</pubDate></item><item><title>AC、AP问题解决办法</title><link>https://SDYTO.github.io/520.github.io/post/AC%E3%80%81AP-wen-ti-jie-jue-ban-fa.html</link><description>1.检查电源和网络连接：确保AC和AP的电源和网络连接正常，检查接口和线缆是否损坏或松动。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/AC%E3%80%81AP-wen-ti-jie-jue-ban-fa.html</guid><pubDate>Sat, 14 Dec 2024 08:46:16 +0000</pubDate></item><item><title>NPS内网穿透工具</title><link>https://SDYTO.github.io/520.github.io/post/NPS-nei-wang-chuan-tou-gong-ju.html</link><description>&#13;
客户端与服务端下载地址：https://github.com/ehang-io/nps/releases&#13;
github镜像 下载地址 https://githubfast.com/ehang-io/nps/releases/ &#13;
1.下载解压文件&#13;
mkdir nps &amp;&amp; cd nps&#13;
# 下载服务端&#13;
wget https://github.com/ehang-io/nps/releases/download/v0.26.10/linux_amd64_server.tar.gz&#13;
# 解压&#13;
tar -zxvf linux_amd64_server.tar.gz&#13;
2.常用配置&#13;
● • http_proxy_port：域名代理http代理监听端口。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/NPS-nei-wang-chuan-tou-gong-ju.html</guid><pubDate>Thu, 12 Dec 2024 03:45:52 +0000</pubDate></item><item><title>NPS安装</title><link>https://SDYTO.github.io/520.github.io/post/NPS-an-zhuang.html</link><description>22222222222。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/NPS-an-zhuang.html</guid><pubDate>Thu, 12 Dec 2024 03:39:01 +0000</pubDate></item><item><title>分区交换机配置过程</title><link>https://SDYTO.github.io/520.github.io/post/fen-qu-jiao-huan-ji-pei-zhi-guo-cheng.html</link><description>&gt; [!TIP]&#13;
&gt; &#13;
 admin@huawei.com&#13;
#==============安装weakea插件===========================&#13;
&#13;
&lt;JBZHSL-S7706&gt;load-module weakea &#13;
Info: Load weakea_V200R021C10SPC600.mod from the startup system software to $_install_mod/weakea_V200R021C10SPC600.mod. You can run the install-module weakea_V200R021C10SPC600.mod command to install it.&#13;
&lt;JBZHSL-S7706&gt;install-module weakea_V200R021C10SPC600.mod&#13;
&#13;
&lt;JBZHSL-S7706&gt;load-module weakea&#13;
Error: Unrecognized command found at '^' position.&#13;
以上提示本地不存在该插件，原因是从&#13;
V200R019C10SPC500到v200R020需要到华为官网下载WEAKEA插件【需要用到华为账户下载后FTP上传到交换机，不推荐】&#13;
可以在系统视图直接执行 ssh server publickey rsa&#13;
[JBZHSL-S7706] ssh server publickey rsa&#13;
&#13;
设备生成的指定秘钥算法配置等类似如下：&#13;
&#13;
#ssh server cipher aes256_ctr aes128_ctr&#13;
#ssh server hmac sha2_256&#13;
#ssh server key-exchange dh_group_exchange_sha1 dh_group14_sha1 dh_group1_sha1&#13;
#ssh client cipher aes256_ctr aes128_ctr&#13;
#ssh client hmac sha2_256&#13;
#ssh client key-exchange dh_group_ssh client key-exchange dh_group_exchange_sha1 dh_group14_sha1 dh_group1_sha1&#13;
#ssh server publickey rsa_sha2_512 rsa_sha2_256&#13;
&#13;
将上述算法全部undo掉&#13;
&#13;
sys&#13;
undo ssh server cipher&#13;
undo ssh server hmac&#13;
undo ssh server key-exchange&#13;
undo ssh client cipher&#13;
undo ssh client hmac&#13;
undo ssh client key-exchange&#13;
undo ssh server publickey&#13;
&#13;
v200R020版本起有登录源接口限制 建议配置：&#13;
ssh server-source all-interface&#13;
qu&#13;
&#13;
#==============开始配置交换机===========================&#13;
#查看当前所有配置&#13;
dis cur&#13;
&#13;
#查看端口/网口状态和配置简要信息&#13;
dis int bri&#13;
&#13;
#关闭终端显示调试/日志/告警信息功能&#13;
undo terminal monitor&#13;
&#13;
#查看Eth-Trunk接口的状态信息&#13;
dis cur interface Eth-Trunk&#13;
&#13;
#查看STP状态信息&#13;
dis stp br&#13;
&#13;
#查看NTP状态信息&#13;
dis ntp status&#13;
dis clock&#13;
&#13;
#查看安装信息&#13;
dis startup&#13;
&#13;
#进入系统视图，并清除console口密码&#13;
sys&#13;
user-interface console 0&#13;
undo authentication-mode&#13;
y&#13;
&#13;
#配置LLDP/NTP/SNMP&#13;
qu&#13;
lldp enable&#13;
ntp-service ipv6 disable&#13;
y&#13;
ntp-service ipv6 server disable&#13;
y&#13;
ntp-service sync-interval 180&#13;
ntp-service server disable&#13;
undo ntp-service disable n &#13;
undo ntp-service server disable&#13;
ntp-service unicast-server 203.107.6.88&#13;
clock timezone BJ add 08:00:00&#13;
&#13;
snmp-agent&#13;
snmp-agent community read yto_public&#13;
snmp-agent community write yto_write&#13;
snmp-agent sys-info version v2c v3&#13;
snmp-agent protocol source-status all-interface&#13;
undo snmp-agent protocol source-status ipv6 all-interface&#13;
&#13;
#配置VPN实例和STP&#13;
ip vpn-instance _mgmt_&#13;
ipv4-family&#13;
qu&#13;
stp region-configuration&#13;
region-name _mgmt_&#13;
instance 2828 vlan 2828 &#13;
active region-configuration&#13;
qu&#13;
stp pathcost-standard dot1t&#13;
stp enable&#13;
&#13;
#添加VLAN 3 7 2828&#13;
vlan batch 3  7 2828&#13;
&#13;
#配置管理口和带外管理和说明&#13;
int vlan 3&#13;
description # Switch_MGMT #&#13;
ip address 10.150.65.86 255.255.255.0&#13;
int vlan 2828&#13;
ip binding vpn-instance _mgmt_&#13;
description # To-ShenZhen_MGMT_HX_JF_S5736-S #&#13;
ip address 10.144.3.86 255.255.255.0&#13;
qu&#13;
ip route-static vpn-instance _mgmt_ 0.0.0.0 0.0.0.0 10.144.3.1&#13;
ip route-static 0.0.0.0 0.0.0.0 10.150.65.1&#13;
&#13;
#创建链路聚合端口（其它Trunk接口配置类似，两个交换机的trunk接口相连，可以互通Vlan）&#13;
interface Eth-Trunk 27&#13;
description # ShenZhen_CZ_HX_JF_S7706 #&#13;
port link-type trunk&#13;
port trunk allow-pass vlan all&#13;
&#13;
#将端口聚合到Trunk 27 中--（连接核心交换机的端口）&#13;
interface Eth-Trunk 27&#13;
trunkport g0/0/27&#13;
trunkport g0/0/28&#13;
&#13;
#配置带外管理端口&#13;
interface g0/0/25&#13;
description # _mgmt_ #&#13;
port link-type access&#13;
port default vlan 2828&#13;
&#13;
#配置业务口&#13;
int range g0/0/1 to g0/0/24&#13;
description # ShenZhen_JG_JCD01_IND #&#13;
port link-type access&#13;
port default vlan 7&#13;
&#13;
&#13;
#修改交换机名称（每个中心名称不一样）&#13;
[FutureMatrix] sysname ShenZhen_CZ_JR_JXD07_S5735-L&#13;
&#13;
#================================================&#13;
&#13;
#退出，保存&#13;
[FutureMatrix-port-group]qu&#13;
[FutureMatrix]qu&#13;
&lt;FutureMatrix&gt;sa&#13;
The current configuration will be written to flash:/vrpcfg.zip.&#13;
Are you sure to continue?[Y/N]y&#13;
&#13;
#==============配置ssh===========================&#13;
1、 首先开启ssh服务&#13;
stelnet server enable&#13;
ssh authentication-type default password&#13;
&#13;
2、创建本地RSA密钥对&#13;
rsa local-key-pair creat&#13;
y&#13;
2048&#13;
&#13;
3、配置vty界面支持的登录协议&#13;
user-interface vty 0 4&#13;
authentication-mode aaa&#13;
protocol inbound ssh&#13;
user privilege level 15 //protocol inbound all这里选择ssh或ALL都可最好选择ssh&#13;
&#13;
4、进入aaa模式配置用户和用户权限以及登录方式&#13;
aaa&#13;
local-user admin password cipher yto.net.cn&#13;
local-user admin privilege level 15&#13;
local-user admin service-type ssh&#13;
&#13;
5、ssh添加用户&#13;
ssh user admin&#13;
ssh user admin authentication-type password ******&#13;
ssh user admin service-type stelnet&#13;
undo ssh user root&#13;
&#13;
6、解除连接限制&#13;
ssh client first-time enable&#13;
ssh server-source all-interface&#13;
y&#13;
&#13;
#下面这条不需要加，不安装weakea补丁时需要&#13;
#ssh server-source -i Vlanif3&#13;
&#13;
7、关闭密码策略&#13;
aaa&#13;
undo local-aaa-user password policy administrator&#13;
&#13;
#==============配置ssh完成，保存所有配置===========================&#13;
[FutureMatrix-port-group]qu&#13;
[FutureMatrix]qu&#13;
&lt;FutureMatrix&gt;sa&#13;
The current configuration will be written to flash:/vrpcfg.zip.&#13;
Are you sure to continue?[Y/N]y&#13;
&#13;
8、修改密码（需要时使用）&#13;
local-user admin password irreversible-cipher admin&#13;
。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/fen-qu-jiao-huan-ji-pei-zhi-guo-cheng.html</guid><pubDate>Thu, 12 Dec 2024 03:30:32 +0000</pubDate></item><item><title>FinalShell SSH工具,服务器管理,远程桌面加速软件,支持Windows,macOS</title><link>https://SDYTO.github.io/520.github.io/post/FinalShell%20SSH-gong-ju-%2C-fu-wu-qi-guan-li-%2C-yuan-cheng-zhuo-mian-jia-su-ruan-jian-%2C-zhi-chi-Windows%2CmacOS.html</link><description>**https://www.hostbuf.com/t/988.html**&#13;
![image](https://github.com/user-attachments/assets/e3fb511d-d4f7-4d92-9eba-cb7b30f9a94f)&#13;
content' typography='classic'&gt;&#13;
FinalShell SSH工具,服务器管理,远程桌面加速软件,支持Windows,macOS,Linux,版本4.5.12,更新日期2024.10.30 |  &#13;
-- | --&#13;
  | FinalShell是一体化的的服务器,网络管理软件,不仅是ssh客户端,还是功能强大的开发,运维工具,充分满足开发,运维需求.特色功能:云端同步,免费海外服务器远程桌面加速,ssh加速,本地化命令输入框,支持自动补全,命令历史,自定义命令参数.Windows X64版,下载地址:https://dl.hostbuf.com/finalshell3/finalshell_windows_x64.exemacOS Arm版,支持m1,m2,m3 cpu,下载地址:https://dl.hostbuf.com/finalshell3/finalshell_macos_arm64.pkgmacOS X64版,支持旧款intel cpu,下载地址:https://dl.hostbuf.com/finalshell3/finalshell_macos_x64.pkgLinux X64版,下载地址:https://dl.hostbuf.com/finalshell3/finalshell_linux_x64.debLinux Arm64版,下载地址:https://dl.hostbuf.com/finalshell3/finalshell_linux_arm64.debLinux LoongArch64龙芯版,下载地址:https://dl.hostbuf.com/finalshell3/finalshell_linux_loong64.deb&#13;
&#13;
&lt;/div&gt;&lt;!--EndFragment--&gt;&#13;
&lt;/body&gt;&#13;
&lt;/html&gt;。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/FinalShell%20SSH-gong-ju-%2C-fu-wu-qi-guan-li-%2C-yuan-cheng-zhuo-mian-jia-su-ruan-jian-%2C-zhi-chi-Windows%2CmacOS.html</guid><pubDate>Thu, 12 Dec 2024 03:29:08 +0000</pubDate></item><item><title>海康卫视-设备巡检工具</title><link>https://SDYTO.github.io/520.github.io/post/hai-kang-wei-shi---she-bei-xun-jian-gong-ju.html</link><description>1、批量设备配置检测：批量巡检项目上是否有产品参数不合理？忘了配置？ 工具可以批量检测异常参数（如码率过大、过小），直观显示功能开关（如某一通道GB协议配置异常）、萤石云/ISUP是否在线、校时源….&#13;
2、批量录像状态检测：批量巡检项目上是否存在录像异常片段、硬盘状态、阵列状态…. &#13;
3、批量门禁运行状态：可批量自动统计门禁设备日志情况，直观展示各门禁近期运行状态。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/hai-kang-wei-shi---she-bei-xun-jian-gong-ju.html</guid><pubDate>Thu, 12 Dec 2024 03:26:21 +0000</pubDate></item><item><title>33213</title><link>https://SDYTO.github.io/520.github.io/post/33213.html</link><description>333234&#13;
f&#13;
f&#13;
f&#13;
ff&#13;
f&#13;
f&#13;
f&#13;
f&#13;
f&#13;
ff&#13;
f&#13;
f&#13;
f&#13;
f&#13;
ff&#13;
&#13;
ff&#13;
f&#13;
f&#13;
f&#13;
f&#13;
f&#13;
ff&#13;
&#13;
ff&#13;
f&#13;
f&#13;
f&#13;
f&#13;
f&#13;
f&#13;
f&#13;
f&#13;
f&#13;
f&#13;
f&#13;
f。</description><guid isPermaLink="true">https://SDYTO.github.io/520.github.io/post/33213.html</guid><pubDate>Wed, 11 Dec 2024 14:09:31 +0000</pubDate></item></channel></rss>